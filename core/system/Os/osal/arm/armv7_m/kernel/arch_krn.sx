/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

#define _ASSEMBLER_

#include "asm_offset.h"
#include "arch_offset.h"
#include "arch_stack.h"
#include "asm_arm.h"


#define IRQ_ENABLE() 		cpsie 	i;dsb;isb
#define IRQ_DISABLE()		cpsid 	i;dsb;isb

#define SCB_ICSR 		0xE000ED04
#define ICSR_VECTACTIVE	0x1ff

#define REG_SAVE r4-r11

#if defined(__GNUC__) || defined (__ghs__)

ASM_EXTERN(Os_Sys)
	
#if defined(__GNUC__)
	.syntax unified
	.thumb
#elif defined(__ghs__)
	.thumb2
#else
#error Compiler not supported
#endif

	.section .text

ASM_GLOBAL(Irq_Handler)
ASM_TYPE(Irq_Handler, %function)
ASM_GLOBAL(SVC_Handler)
ASM_TYPE(SVC_Handler, %function)
ASM_GLOBAL(ContextRestore)
ASM_TYPE(ContextRestore, %function)


/* 
 * Swap context and then flow down to trigger pendsv
 * We are on PSP stack here.
 */

ASM_GLOBAL(Os_ArchSwapAndTrigPendSv)
ASM_LABEL(Os_ArchSwapAndTrigPendSv)
	bl 		Os_ArchDoSwap	/* Call C-function for readability */ 
		
ASM_GLOBAL(Os_ArchTrigPendSV)
ASM_LABEL(Os_ArchTrigPendSV)
    ldr 	r0,=0xE000ED04
    ldr 	r1,=0x10000000
    str		r1,[r0,#0]
    IRQ_ENABLE()
ASM_LABEL(waitForIt)
	b waitForIt
	

/**
 * Os_ArchSetSpAndCall
 * @req ARC_SWS_OSAL_00001
 *
 * @param sp Pointer to the stack
 * @param f  Pointer to the function to call
 */

ASM_GLOBAL(Os_ArchSetSpAndCall)
ASM_TYPE(Os_ArchSetSpAndCall, %function)
ASM_LABEL(Os_ArchSetSpAndCall)
	mov.w	sp,r0
	mov.w	lr,r1
	bx		lr



/**
 * Os_ArchSwapContext
 * @req ARC_SWS_OSAL_00003
 *
 * @param r0 - pcb for old task
 * @param r1 - pcb for new task
 *
 */
ASM_GLOBAL(Os_ArchSwapContext)
ASM_TYPE(Os_ArchSwapContext, %function)
ASM_LABEL(Os_ArchSwapContext)
	// Save function call registers
    push    {REG_SAVE,lr}

    // store old stack for old task
    mov.w	r4,sp
    str     r4,[r0,#PCB_STACK_CURR_P]

	// Flow down
	// R1 - new PCB
/* @req ARC_SWS_OSAL_00004 */
ASM_GLOBAL(Os_ArchSwapContextTo)
ASM_TYPE(Os_ArchSwapContextTo, %function)
ASM_LABEL(Os_ArchSwapContextTo)

    // Get stack for new task
    ldr 	r4,[r1,#PCB_STACK_CURR_P]
    mov.w 	sp,r4
    
	// Set new current pcb
    ldr     r5,= Os_Sys
    str     r1,[r5,#SYS_CURR_PCB_P]
    
    pop    {REG_SAVE,pc}
    
#elif defined(__ICCARM__)
        
        EXTERN Os_Sys
        
        SECTION .text : CODE (2)
        THUMB
        
        EXTERN Irq_Handler
        EXTERN SVC_Handler
        EXTERN ContextRestore

/* 
 * Swap context and then flow down to trigger pendsv
 * We are on PSP stack here.
 */

        PUBLIC Os_ArchSwapAndTrigPendSv
        EXTERN Os_ArchDoSwap
Os_ArchSwapAndTrigPendSv
        BL 		Os_ArchDoSwap	/* Call C-function for readability */ 
		
        PUBLIC Os_ArchTrigPendSV
Os_ArchTrigPendSV
        ldr 	r0,=0xE000ED04
        ldr 	r1,=0x10000000
        str		r1,[r0,#0]
        IRQ_ENABLE()
waitForIt
        B waitForIt
	

/**
 * Os_ArchSetSpAndCall
 *
 * @param sp Pointer to the stack
 * @param f  Pointer to the function to call
 */

        PUBLIC Os_ArchSetSpAndCall
Os_ArchSetSpAndCall
        mov.w	sp,r0
        mov.w	lr,r1
        bx		lr



/**
 * Os_ArchSwapContext
 *
 * @param r0 - pcb for old task
 * @param r1 - pcb for new task
 *
 */
        PUBLIC Os_ArchSwapContext
Os_ArchSwapContext
        // Save function call registers
        push    {REG_SAVE,lr}
        
        // store old stack for old task
        mov.w	r4,sp
        str     r4,[r0,#PCB_STACK_CURR_P]
        
        // Flow down
        // R1 - new PCB
        PUBLIC Os_ArchSwapContextTo
Os_ArchSwapContextTo
        
        // Get stack for new task
        ldr 	r4,[r1,#PCB_STACK_CURR_P]
        mov.w 	sp,r4
        
        // Set new current pcb
        ldr     r5,= Os_Sys
        str     r1,[r5,#SYS_CURR_PCB_P]
        
        pop    {REG_SAVE,pc}
        

        END       
#endif