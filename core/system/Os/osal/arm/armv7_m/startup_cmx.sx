/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

#if defined(__GNUC__) || defined(__ghs__) 

#define _ASSEMBLER_
#include "asm_arm.h"

#if defined(__GNUC__)
#define ASM_SET(_x, _y)	.thumb_set _x, _y
#elif defined(__ghs__)
#define ASM_SET(_x, _y)	.set _x, _y
#else
#error Compiler not supported
#endif	

#if defined(__GNUC__)
  .syntax unified
	.cpu cortex-m3
	.fpu softvfp
	.thumb
#elif defined(__ghs__)
	.thumb2
#else
#error Compiler not supported
#endif


ASM_GLOBAL(g_pfnVectors)
ASM_GLOBAL(Default_Handler)

ASM_WORD(_sidata)
ASM_WORD(_sdata)
ASM_WORD(_edata)
ASM_WORD(_sbss)
ASM_WORD(_ebss)

/**
 * @brief  This is the code that gets called when the processor first
 *          starts execution following a reset event. Only the absolutely
 *          necessary set is performed, after which the application
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/
#if defined(__GNUC__)
    .section	.text.Reset_Handler
#elif defined(__ghs__)
    .section	.text.Reset_Handler
#else
#error Compiler not supported
#endif
ASM_WEAK(Reset_Handler)
ASM_TYPE(Reset_Handler, %function)
ASM_LABEL(Reset_Handler)

   	/* Init PSP */
	ldr     r0, =_estack
    msr     PSP, r0

	/* Set CONTROL 
	* nPRIV = 0 - 0  Thread mode has privileged access.
	* SPSEL = 1 - 1  In Thread mode, use SP_process as the current stack. 
	*                In Handler mode, this value is reserved.
	*/	
    movs    r0, #2
    msr     CONTROL, r0
    isb

	ldr     r0, =_emspstack
    msr     MSP, r0
    
/* Copy the data segment initializers from flash to SRAM */
  ldr	r0, =_sdata       /* r0 holds start of data in ram */
  ldr	r3, =_edata       /* r3 holds end of data in ram */
  ldr	r5, =_sidata      /* r5 start of data in flash */
  movs	r1, #0
  b	LoopCopyDataInit

ASM_LABEL(CopyDataInit)
	ldr	r4, [r5, r1]          /* read current position in flash */
	str	r4, [r0, r1]          /* store current position in ram */
	adds	r1, r1, #4        /* increment counter */
    
ASM_LABEL(LoopCopyDataInit)
	adds	r2, r0, r1        /* are we at the final position? */
	cmp	r2, r3                /* ... */
	bcc	CopyDataInit          /* nope, continue */
	ldr	r2, =_sbss
	b	LoopFillZerobss

/* Zero fill the bss segment. */  
ASM_LABEL(FillZerobss)
	movs	r3, #0
	str	r3, [r2], #4
    
ASM_LABEL(LoopFillZerobss)
	ldr	r3, = _ebss
	cmp	r2, r3
	bcc	FillZerobss

	ldr	r2, =_smspstack

/* Fill  */
	ldr	r4, = _emspstack
	ldr r3,=0x42424242
  
ASM_LABEL(_Stackfill)
	str	r3, [r2], #4
    
ASM_LABEL(_LoopStackfill)
	cmp	r2, r4
	bcc	_Stackfill
		
#if defined(CFG_ARM_CM4)
	/* Init FPU */
 	// CPACR is located at address 0xE000ED88
	LDR.W   R0, =0xE000ED88
	// Read CPACR
	LDR     R1, [R0]
	// Set bits 20-23 to enable CP10 and CP11 coprocessors
	ORR     R1, R1, #(0xF << 20)
	// Write back the modified value to the CPACR
	STR     R1, [R0]	//  wait for store to complete
	DSB
	// reset pipeline now the FPU is enabled
	ISB
#endif
	
	
/* Call the application's entry point.*/
	bl	main
	bx	lr    
	
	
#if defined(__GNUC__)
.size	Reset_Handler, .-Reset_Handler
#elif defined(__ghs__)
	.type Reset_Handler,$function
	.size Reset_Handler,.-Reset_Handler
#else
#error Compiler not supported
#endif


/**
 * @brief  This is the code that gets called when the processor receives an 
 *         unexpected interrupt.  This simply enters an infinite loop, preserving
 *         the system state for examination by a debugger.
 *
 * @param  None     
 * @retval : None       
*/
#if defined(__GNUC__)
    .section	.text.Default_Handler,"ax",%progbits
#elif defined(__ghs__)
 	.section	.text.Default_Handler,"ax"
#else
#error Compiler not supported
#endif
    
ASM_LABEL(Default_Handler)
ASM_LABEL(Infinite_Loop)
	b	Infinite_Loop
#if defined(__GNUC__)
	.size	Default_Handler, .-Default_Handler
#elif defined(__ghs__)
	.type Default_Handler,$function
	.size Default_Handler,.-Default_Handler
#else
#error Compiler not supported
#endif	
	

/******************************************************************************
* Vector table for a Cortex M3. Vectors start at addr 0x0.
******************************************************************************/    
#if defined(__GNUC__)
 	.section	.isr_vector,"a",%progbits
	.type	g_pfnVectors, %object
#elif defined(__ghs__)
 	.section	.int_vecs,"ax"
#else
#error Compiler not supported
#endif

ASM_EXTERN(Irq_Handler)
ASM_EXTERN(SVC_Handler)
ASM_EXTERN(PendSV_Handler)

ASM_WORD(_estack)
ASM_WORD(Reset_Handler)
ASM_WORD(NMI_Handler)
#if defined(CFG_T1_ENABLE) && !defined(CFG_T1_DISABLE_FLEX)
ASM_WORD(T1_HardFaultHandler)
#else
ASM_WORD(HardFault_Handler)
#endif
ASM_WORD(MemManage_Handler)
ASM_WORD(BusFault_Handler)
ASM_WORD(UsageFault_Handler)
ASM_WORD(0)
ASM_WORD(0)
ASM_WORD(0)
ASM_WORD(0)
ASM_WORD(SVC_Handler)
#if defined(CFG_T1_ENABLE) && !defined(CFG_T1_DISABLE_FLEX)
ASM_WORD(T1_DebugMonitorHandler)
#else
ASM_WORD(DebugMon_Handler)
#endif
ASM_WORD(0)
ASM_WORD(PendSV_Handler)
ASM_WORD(Irq_Handler+1)		/* SysTick */
ASM_REPT(83)
ASM_WORD(Irq_Handler+1)
ASM_ENDREPT
    
#if defined(CFG_S32K144) || defined (CFG_S32K148)	
ASM_REPT(157)
ASM_LONG(0xFF)
ASM_ENDREPT

ASM_LONG(0xFFFFFFFF) /* 8 bytes backdoor comparison key*/
ASM_LONG(0xFFFFFFFF) 
ASM_LONG(0xFFFFFFFF) /* 4 bytes program flash protection bytes */
ASM_LONG(0xFFFF7FFE) /* FDPROT:FEPROT:FOPT:FSEC */   
#endif
    
ASM_WEAK(NMI_Handler)
ASM_SET(NMI_Handler, Default_Handler)

#if defined(CFG_T1_ENABLE) && !defined(CFG_T1_DISABLE_FLEX)

ASM_WEAK(T1_HardFaultHandler)
ASM_SET(T1_HardFaultHandler, Default_Handler)

ASM_WEAK(T1_DebugMonitorHandler)
ASM_SET(T1_DebugMonitorHandler, Default_Handler)

#else

ASM_WEAK(HardFault_Handler)
ASM_SET(HardFault_Handler, Default_Handler)

ASM_WEAK(DebugMon_Handler)
ASM_SET(DebugMon_Handler, Default_Handler)

#endif

ASM_WEAK(MemManage_Handler)
ASM_SET(MemManage_Handler, Default_Handler)

ASM_WEAK(BusFault_Handler)
ASM_SET( BusFault_Handler, Default_Handler)

ASM_WEAK(UsageFault_Handler)
ASM_SET(UsageFault_Handler, Default_Handler)

ASM_WEAK(SVC_Handler)
ASM_SET(SVC_Handler, Default_Handler)

ASM_WEAK(PendSV_Handler)
ASM_SET(PendSV_Handler, Default_Handler)
	

#elif defined(__ICCARM__) 

    MODULE startup_s32k144.s

    EXTERN VTABLE

    PUBLIC Reset_Handler 
    
    PUBLIC g_pfnVectors
    PUBLIC Default_Handler

    EXTERN _sidata
    EXTERN _sdata
    EXTERN _edata
    EXTERN _sbss
    EXTERN _ebss
    EXTERN main    
    
    EXTERN _estack
    EXTERN _emspstack
    EXTERN _smspstack
  
    SECTION .text : CODE (2)
    THUMB
    
Reset_Handler
   	/* Init PSP */
	ldr     r0, = _estack
    msr     PSP, r0

	/* Set CONTROL 
	* nPRIV = 0 - 0  Thread mode has privileged access.
	* SPSEL = 1 - 1  In Thread mode, use SP_process as the current stack. 
	*                In Handler mode, this value is reserved.
	*/	
    movs    r0, #2
    msr     CONTROL, r0
    isb

	ldr     r0, =_emspstack
	msr     MSP, r0
    
/* Copy the data segment initializers from flash to SRAM */
	ldr	r0, =_sdata       /* r0 holds start of data in ram */
	ldr	r3, =_edata       /* r3 holds end of data in ram */
	ldr	r5, =_sidata      /* r5 start of data in flash */
	movs	r1, #0
	b	LoopCopyDataInit

CopyDataInit
	ldr	r4, [r5, r1]          /* read current position in flash */
	str	r4, [r0, r1]          /* store current position in ram */
	adds	r1, r1, #4        /* increment counter */
    
LoopCopyDataInit
	adds	r2, r0, r1        /* are we at the final position? */
	cmp	r2, r3                /* ... */
	bcc	CopyDataInit          /* nope, continue */
	ldr	r2, =_sbss
	b	LoopFillZerobss

/* Zero fill the bss segment. */  
FillZerobss
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss
	ldr	r3, = _ebss
	cmp	r2, r3
	bcc	FillZerobss

	ldr	r2, =_smspstack

/* Fill  */
	ldr	r4, = _emspstack
	ldr r3,=0x42424242
  
_Stackfill
	str	r3, [r2], #4
    
_LoopStackfill
	cmp	r2, r4
	bcc	_Stackfill

#if defined(CFG_ARM_CM4)
	/* Init FPU */
 	// CPACR is located at address 0xE000ED88
	LDR.W   R0, =0xE000ED88
	// Read CPACR
	LDR     R1, [R0]
	// Set bits 20-23 to enable CP10 and CP11 coprocessors
	ORR     R1, R1, #(0xF << 20)
	// Write back the modified value to the CPACR
	STR     R1, [R0]	//  wait for store to complete
	DSB
	// reset pipeline now the FPU is enabled
	ISB
#endif
	
	
/* Call the application's entry point.*/
	bl	main
	bx	lr    

/**
 * @brief  This is the code that gets called when the processor receives an 
 *         unexpected interrupt.  This simply enters an infinite loop, preserving
 *         the system state for examination by a debugger.
 *
 * @param  None     
 * @retval : None       
*/
    SECTION .text : CODE (2)
Default_Handler
Infinite_Loop
	b	Infinite_Loop
 
/******************************************************************************
* Vector table for a Cortex M3. Vectors start at addr 0x0.
******************************************************************************/    
    
    SECTION .isr_vector : DATA :NOROOT (2)

    EXTERN Irq_Handler
    PUBLIC g_pfnVectors
    EXTERN _Stack_start              /* Top of Stack for Initial Stack Pointer */
    EXTERN NMI_Handler               /* NMI Handler */
    EXTERN HardFault_Handler         /* Hard Fault Handler */
    EXTERN MemManage_Handler         /* Reserved */
    EXTERN BusFault_Handler          /* Bus Fault Handler */
    EXTERN UsageFault_Handler        /* Usage Fault Handler */
    EXTERN SVC_Handler               /* SVCall Handler */
    EXTERN DebugMon_Handler          /* Debug Monitor Handler */
    EXTERN PendSV_Handler            /* PendSV Handler */
    EXTERN SysTick_Handler           /* SysTick Handler */
    
g_pfnVectors
    DCD _estack		              /* Top of Stack for Initial Stack Pointer */
    DCD Reset_Handler             /* Reset Handler */
    DCD NMI_Handler               /* NMI Handler */
    DCD HardFault_Handler         /* Hard Fault Handler */
    DCD MemManage_Handler         /* Reserved */
    DCD BusFault_Handler          /* Bus Fault Handler */
    DCD UsageFault_Handler        /* Usage Fault Handler */
    DCD 0                         /* Reserved */
    DCD 0                         /* Reserved */
    DCD 0                         /* Reserved */
    DCD 0                         /* Reserved */
    DCD SVC_Handler               /* SVCall Handler */
    DCD DebugMon_Handler          /* Debug Monitor Handler */
    DCD 0                         /* Reserved */
    DCD PendSV_Handler            /* PendSV Handler */
    DCD Irq_Handler           	  /* SysTick Handler */
	REPT   83    
    DCD Irq_Handler
    ENDR

    END

#endif