
/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

/* Generator version: 2.4.0
 * AUTOSAR version:   4.0.3
 */

package BSWConfiguration.Services.EcuM

import AUTOSAR.Services.EcuM.*
import ArcCore.Platform.ImplementationDataTypes.*

// service component according to AutoSAR.
component service EcuM {
	ports {
		server SR_User provides EcuM_StateRequest
		sender currentMode provides EcuM_CurrentMode
		
		server shutdownTarget provides EcuM_ShutdownTarget
		
		server bootTarget provides EcuM_BootTarget
	}
}
 
// define service component internal behavior for the RTE.
internalBehavior EcuMFixedBehavior for EcuM {

	dataTypeMappings {
		EcuMFixedTypeMappings
	}
	runnable EcuM_MainFunction [0.0] {
		symbol "EcuM_MainFunction"
		modeSwitchPoint currentMode.currentMode
	}
	/* @req EcuMf2762 */
	runnable concurrent RequestRUN [0.0] {
		symbol "EcuM_RequestRUN"
		operationInvokedEvent SR_User.RequestRUN
	}
	runnable concurrent ReleaseRUN [0.0] {
		symbol "EcuM_ReleaseRUN"
		operationInvokedEvent SR_User.ReleaseRUN
	}
	runnable concurrent RequestPOSTRUN [0.0] {
		symbol "EcuM_RequestPOST_RUN"
		operationInvokedEvent SR_User.RequestPOSTRUN
	}
	runnable concurrent ReleasePOSTRUN [0.0] {
		symbol "EcuM_ReleasePOST_RUN"
		operationInvokedEvent SR_User.ReleasePOSTRUN
	}
	/* @req EcuMf2763 */
	runnable concurrent SelectShutdownTarget [0.0] {
		symbol "EcuM_SelectShutdownTarget"
		operationInvokedEvent shutdownTarget.SelectShutdownTarget
	}
	runnable concurrent GetShutdownTarget [0.0] {
		symbol "EcuM_GetShutdownTarget"
		operationInvokedEvent shutdownTarget.GetShutdownTarget
	}
	runnable concurrent GetLastShutdownTarget [0.0] {
		symbol "EcuM_GetLastShutdownTarget"
		operationInvokedEvent shutdownTarget.GetLastShutdownTarget
	}
	runnable concurrent SelectBootTarget [0.0] {
		symbol "EcuM_SelectBootTarget"
		operationInvokedEvent bootTarget.SelectBootTarget
	}
	runnable concurrent GetBootTarget [0.0] {
		symbol "EcuM_GetBootTarget"
		operationInvokedEvent bootTarget.GetBootTarget
	}
	// port api options
	portAPIOption SR_User {EcuM_UserType 0}
}
implementation EcuMFixedImpl for EcuM.EcuMFixedBehavior {
	language c
	codeDescriptor "src"
	vendorId 60
}

