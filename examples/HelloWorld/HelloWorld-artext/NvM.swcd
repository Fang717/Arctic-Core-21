
/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

/* Generator version: 1.2.1
 * AUTOSAR version:   4.0.3
 */

package HelloWorld_Generic.Services.NvM

import ArcCore.Platform.ImplementationDataTypes.*
import AUTOSAR.Services.NvM.*

// Interfaces
/* @req NVM736 */
interface clientServer service NvMNotifyInitBlock {
       error E_OK 0
       error E_NOT_OK 1
       operation InitBlock possibleErrors E_OK, E_NOT_OK {}
}

/* @req NVM735 */
interface clientServer service NvMNotifyJobFinished {
       error E_OK 0
       operation JobFinished possibleErrors E_OK {
             in uint8 ServiceId in NvM_RequestResultType JobResult
       }

}

interface clientServer service NvMService {
	error E_OK 0
	error E_NOT_OK 1
	operation GetErrorStatus possibleErrors E_OK, E_NOT_OK {
		out  NvM_RequestResultType  RequestResultPtr
	}
	operation SetDataIndex possibleErrors E_OK, E_NOT_OK {
		in uint8 DataIndex
	} 
	operation GetDataIndex possibleErrors E_OK, E_NOT_OK {
		out uint8 DataIndexPtr
	}
	operation SetRamBlockStatus possibleErrors E_OK, E_NOT_OK {
		in ^boolean BlockChanged
	}
	operation ReadBlock possibleErrors E_OK, E_NOT_OK {
		in VoidPtr DstPtr
	}
	operation WriteBlock possibleErrors E_OK, E_NOT_OK {
		in ConstVoidPtr SrcPtr
	}
	operation RestoreBlockDefaults possibleErrors E_OK, E_NOT_OK {
		in VoidPtr DstPtr
	}
	operation EraseNvBlock possibleErrors E_OK, E_NOT_OK {}
	operation InvalidateNvBlock possibleErrors E_OK, E_NOT_OK {}
}

interface clientServer service NvMAdmin {
	error E_OK 0
	error E_NOT_OK 1
	operation SetBlockProtection possibleErrors E_OK, E_NOT_OK {
		in ^boolean ProtectionEnabled
	}        
}

// service component according to AutoSAR.
component service NvM {
       ports {
             server PS_SwcMem_Block1 provides NvMService
             client PNJobFinished_SwcMem_Block1 requires NvMNotifyJobFinished
             client PNInitBlock_SwcMem_Block1 requires NvMNotifyInitBlock
             server PAdmin_SwcMem_Block1 provides NvMAdmin
             server PS_SwcMem_Block2 provides NvMService
             client PNJobFinished_SwcMem_Block2 requires NvMNotifyJobFinished
             client PNInitBlock_SwcMem_Block2 requires NvMNotifyInitBlock
             server PAdmin_SwcMem_Block2 provides NvMAdmin
       }
}

 
// define service component internal behavior for the RTE.
internalBehavior NvMBehavior for NvM {
	// runnables
	runnable NvM_MainFunction [0.0] {
		symbol "NvM_MainFunction"
		serverCallPoint synchronous PNInitBlock_SwcMem_Block1.InitBlock
		serverCallPoint synchronous PNJobFinished_SwcMem_Block1.JobFinished
		serverCallPoint synchronous PNInitBlock_SwcMem_Block2.InitBlock
		serverCallPoint synchronous PNJobFinished_SwcMem_Block2.JobFinished
	}
	runnable concurrent GetErrorStatus [0.0] {
		symbol "NvM_GetErrorStatus"
		operationInvokedEvent PS_SwcMem_Block1.GetErrorStatus
		operationInvokedEvent PS_SwcMem_Block2.GetErrorStatus
	}
	runnable concurrent SetDataIndex [0.0] {
		symbol "NvM_SetDataIndex"
		operationInvokedEvent PS_SwcMem_Block1.SetDataIndex
		operationInvokedEvent PS_SwcMem_Block2.SetDataIndex
	}
	runnable concurrent GetDataIndex [0.0] {
		symbol "NvM_GetDataIndex"
		operationInvokedEvent PS_SwcMem_Block1.GetDataIndex
		operationInvokedEvent PS_SwcMem_Block2.GetDataIndex
	}
	runnable concurrent SetRamBlockStatus [0.0] {
		symbol "NvM_SetRamBlockStatus"
		operationInvokedEvent PS_SwcMem_Block1.SetRamBlockStatus
		operationInvokedEvent PS_SwcMem_Block2.SetRamBlockStatus
	}
	runnable concurrent ReadBlock [0.0] {
		symbol "NvM_ReadBlock"
		operationInvokedEvent PS_SwcMem_Block1.ReadBlock
		operationInvokedEvent PS_SwcMem_Block2.ReadBlock
	}
	runnable concurrent WriteBlock [0.0] {
		symbol "NvM_WriteBlock"
		operationInvokedEvent PS_SwcMem_Block1.WriteBlock
		operationInvokedEvent PS_SwcMem_Block2.WriteBlock
	}
	runnable concurrent RestoreBlockDefaults [0.0] {
		symbol "NvM_RestoreBlockDefaults"
		operationInvokedEvent PS_SwcMem_Block1.RestoreBlockDefaults
		operationInvokedEvent PS_SwcMem_Block2.RestoreBlockDefaults
	}	
	runnable concurrent EraseNvBlock [0.0] {
		symbol "NvM_EraseNvBlock"
		operationInvokedEvent PS_SwcMem_Block1.EraseNvBlock
		operationInvokedEvent PS_SwcMem_Block2.EraseNvBlock
	}
	runnable concurrent InvalidateNvBlock [0.0] {
		symbol "NvM_InvalidateNvBlock"
		operationInvokedEvent PS_SwcMem_Block1.InvalidateNvBlock
		operationInvokedEvent PS_SwcMem_Block2.InvalidateNvBlock
	}
	runnable concurrent SetBlockProtection [0.0] {
		symbol "NvM_SetBlockProtection"
		operationInvokedEvent PAdmin_SwcMem_Block1.SetBlockProtection
		operationInvokedEvent PAdmin_SwcMem_Block2.SetBlockProtection
	}
	// port api options
	portAPIOption PS_SwcMem_Block1 { NvM_BlockIdType 2}
	portAPIOption PAdmin_SwcMem_Block1 { NvM_BlockIdType 2}
	portAPIOption PS_SwcMem_Block2 { NvM_BlockIdType 3}
	portAPIOption PAdmin_SwcMem_Block2 { NvM_BlockIdType 3}
}

implementation NvMImpl for NvM.NvMBehavior {
	language c
	codeDescriptor "src"
	vendorId 60
}

