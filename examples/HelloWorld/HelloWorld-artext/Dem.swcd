
/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

/* Generator version: 5.17.1
 * AUTOSAR version:   4.0.3
 */


package HelloWorld_Generic.Services.Dem

import ArcCore.Platform.ImplementationDataTypes.*
import AUTOSAR.Services.Dem.*

array impl uint8[33] Dem_MaxDataValueType

// Interfaces


interface clientServer service DiagnosticInfo {
	error E_OK 0
	error E_NOT_OK 1
	error E_NO_DTC_AVAILABLE 2
	operation GetEventStatus possibleErrors E_OK, E_NOT_OK {
		out Dem_EventStatusExtendedType EventStatusExtended
 	}
	operation GetEventFailed possibleErrors E_OK, E_NOT_OK {
		out ^boolean EventFailed
 	}
	operation GetEventTested possibleErrors E_OK, E_NOT_OK {
		out ^boolean EventTested
 	}
	operation GetDTCOfEvent possibleErrors E_OK, E_NOT_OK, E_NO_DTC_AVAILABLE {
		in Dem_DTCFormatType DTCFormat
		out uint32 DTCOfEvent
 	}
	operation GetFaultDetectionCounter possibleErrors E_OK, E_NOT_OK {
		out sint8 FaultDetectionCounter
 	}
	operation GetEventFreezeFrameData possibleErrors E_OK, E_NOT_OK {
		in uint8 RecordNumber
		in ^boolean ReportTotalRecord
		in uint16 DataId
		out Dem_MaxDataValueType DestBuffer
 	}
	operation GetEventExtendedDataRecord possibleErrors E_OK, E_NOT_OK {
		in uint8 RecordNumber
		out Dem_MaxDataValueType DestBuffer
 	}
}

interface clientServer service GeneralDiagnosticInfo {
	error E_OK 0
	error E_NOT_OK 1
	error E_NO_DTC_AVAILABLE 2
	operation GetEventStatus possibleErrors E_OK, E_NOT_OK {
		in Dem_EventIdType EventId
		out Dem_EventStatusExtendedType EventStatusExtended
 	}
	operation GetEventFailed possibleErrors E_OK, E_NOT_OK {
		in Dem_EventIdType EventId
		out ^boolean EventFailed
 	}
	operation GetEventTested possibleErrors E_OK, E_NOT_OK {
		in Dem_EventIdType EventId
		out ^boolean EventTested
 	}
	operation GetDTCOfEvent possibleErrors E_OK, E_NOT_OK, E_NO_DTC_AVAILABLE {
		in Dem_EventIdType EventId
		in Dem_DTCFormatType DTCFormat
		out uint32 DTCOfEvent
 	}
	operation GetFaultDetectionCounter possibleErrors E_OK, E_NOT_OK {
		in Dem_EventIdType EventId
		out sint8 FaultDetectionCounter
 	}
	operation GetEventFreezeFrameData possibleErrors E_OK, E_NOT_OK {
		in Dem_EventIdType EventId
		in uint8 RecordNumber
		in ^boolean ReportTotalRecord
		in uint16 DataId
		out Dem_MaxDataValueType DestBuffer
 	}
	operation GetEventExtendedDataRecord possibleErrors E_OK, E_NOT_OK {
		in Dem_EventIdType EventId
		in uint8 RecordNumber
		out Dem_MaxDataValueType DestBuffer
 	}
}



interface clientServer service OperationCycle {
	error E_OK 0
	error E_NOT_OK 1
	operation SetOperationCycleState possibleErrors E_OK, E_NOT_OK {
		in Dem_OperationCycleStateType CycleState
	}
}


interface clientServer service EventAvailable {
	error E_OK 0
	error E_NOT_OK 1
	operation SetEventAvailable possibleErrors E_OK, E_NOT_OK {
		in ^boolean AvailableStatus
 	}
}

// service component according to AutoSAR.
component service Dem {
	ports {
		server Event_TestEvent provides DiagnosticMonitor 
		server EvtInfo_TestEvent provides DiagnosticInfo
		server GeneralEvtInfo provides GeneralDiagnosticInfo
		server OpCycle_DemOperationCycle provides OperationCycle

		server Dcm provides DcmIf
		client CBInitEvt_TestEvent requires CallbackInitMonitorForEvent 
		server ControlEventAvailable_TestEvent provides EventAvailable 
	}
}
 
// define service component internal behavior for the RTE.
internalBehavior DemBehavior for Dem {
	runnable Dem_MainFunction [0.0] {
		symbol "Dem_MainFunction"
	}
	runnable concurrent SetEventStatus [0.0] {
		symbol "Dem_SetEventStatus"
		operationInvokedEvent Event_TestEvent.SetEventStatus
		
		//serverCallPoint synchronous CBStatusDTC_*.DTCStatusChanged
		//serverCallPoint synchronous CBReadData_*.ReadData
	}
	runnable concurrent ResetEventStatus [0.0] {
		symbol "Dem_ResetEventStatus"
		operationInvokedEvent Event_TestEvent.ResetEventStatus
		
		//serverCallPoint synchronous CBStatusDTC_*.DTCStatusChanged
	}
	runnable concurrent SetEventDisabled [0.0] {
		symbol "Dem_SetEventDisabled"
		operationInvokedEvent Event_TestEvent.SetEventDisabled
		
		//serverCallPoint synchronous CBStatusDTC_*.DTCStatusChanged
	}
	runnable concurrent PrestoreFreezeFrame [0.0] {
		symbol "Dem_PrestoreFreezeFrame"
		operationInvokedEvent Event_TestEvent.PrestoreFreezeFrame
		
		//serverCallPoint synchronous CBStatusDTC_*.DTCStatusChanged
	}
	runnable concurrent ClearPrestoredFreezeFrame [0.0] {
		symbol "Dem_ClearPrestoredFreezeFrame"
		operationInvokedEvent Event_TestEvent.ClearPrestoredFreezeFrame
		
		//serverCallPoint synchronous CBStatusDTC_*.DTCStatusChanged
	}

	runnable concurrent GetEventStatus [0.0] {
		symbol "Dem_GetEventStatus"
		operationInvokedEvent EvtInfo_TestEvent.GetEventStatus
		operationInvokedEvent GeneralEvtInfo.GetEventStatus
	}

	runnable concurrent GetEventFailed [0.0] {
		symbol "Dem_GetEventFailed"
		operationInvokedEvent EvtInfo_TestEvent.GetEventFailed
		operationInvokedEvent GeneralEvtInfo.GetEventFailed
	}

	runnable concurrent GetEventTested [0.0] {
		symbol "Dem_GetEventTested"
		operationInvokedEvent EvtInfo_TestEvent.GetEventTested
		operationInvokedEvent GeneralEvtInfo.GetEventTested
	}

	runnable concurrent GetDTCOfEvent [0.0] {
		symbol "Dem_GetDTCOfEvent"
		operationInvokedEvent EvtInfo_TestEvent.GetDTCOfEvent
		operationInvokedEvent GeneralEvtInfo.GetDTCOfEvent
	}

	runnable concurrent GetFaultDetectionCounter [0.0] {
		symbol "Dem_GetFaultDetectionCounter"
		operationInvokedEvent EvtInfo_TestEvent.GetFaultDetectionCounter
		operationInvokedEvent GeneralEvtInfo.GetFaultDetectionCounter
	}

	runnable concurrent GetEventFreezeFrameData [0.0] {
		symbol "Dem_GetEventFreezeFrameData"
		operationInvokedEvent EvtInfo_TestEvent.GetEventFreezeFrameData
		operationInvokedEvent GeneralEvtInfo.GetEventFreezeFrameData
	}

	runnable concurrent GetEventExtendedDataRecord [0.0] {
		symbol "Dem_GetEventExtendedDataRecord"
		operationInvokedEvent EvtInfo_TestEvent.GetEventExtendedDataRecord
		operationInvokedEvent GeneralEvtInfo.GetEventExtendedDataRecord
	}

	runnable concurrent SetOperationCycleState [0.0] {
		symbol "Dem_SetOperationCycleState"
		operationInvokedEvent OpCycle_DemOperationCycle.SetOperationCycleState
		serverCallPoint synchronous CBInitEvt_TestEvent.InitMonitorForEvent
			
		//serverCallPoint synchronous CBStatusDTC_*.DTCStatusChanged
	}


	runnable ClearDTC [0.0] {
		symbol "Dem_ClearDTC"
		operationInvokedEvent Dcm.ClearDTC
		serverCallPoint synchronous CBInitEvt_TestEvent.InitMonitorForEvent
	}



	runnable concurrent SetEventAvailable [0.0] {
		symbol "Dem_SetEventAvailable"
		operationInvokedEvent ControlEventAvailable_TestEvent.SetEventAvailable
	}
	// port api options
	portAPIOption Event_TestEvent {Dem_EventIdType 6}
	portAPIOption EvtInfo_TestEvent {Dem_EventIdType 6}
	portAPIOption ControlEventAvailable_TestEvent {Dem_EventIdType 6}
	portAPIOption OpCycle_DemOperationCycle {Dem_OperationCycleIdType 2}
}

implementation DemImpl for Dem.DemBehavior {
	language c
	codeDescriptor "src"
	vendorId 60
}

