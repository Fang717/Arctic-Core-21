/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

/* Generator version: 3.0.0
 * AUTOSAR version:   4.3.0
 */

package HelloWorld_Generic.Services.WdgM

import AUTOSAR.Services.WdgM.*
import ArcCore.Platform.ImplementationDataTypes.*

// service component according to AutoSAR.
component service WdgM {
	ports {
		// For each supervised entity the Watchdog Manager
		// provides a port for accessing GetLocalStatus
		server localSupervisionStatus_Supervised100msTask provides WdgM_LocalSuperVisionStatus

		// For each supervised entity the Watchdog Manager
		// provides a port for accessing CheckpointReached
		server localSupervision_Supervised100msTask provides WdgM_LocalSupervision

		// For each supervised entity the Watchdog Manager
		// provides a mode port to signal the Local
		// Supervision Status to interested SW-Cs/CDDs and the RTE
		sender localMode_Supervised100msTask provides WdgM_LocalMode

		// The Watchdog Manager also provides a single mode port
		// to signal the Global Supervision Status to
		// interested SW-Cs/CDDs and the RTE
		sender globalMode provides WdgM_GlobalMode
		
		// The Watchdog Manager provides several ports for access of
		// WdgM_GetFirstExpiredSEID, WdgM_GetGlobalStatus, WdgM_GetMode
		// WdgM_PerformReset and WdgM_SetMode
		server globalSuperVision provides WdgM_GlobalSuperVision
	}
}

// internal behavior for the the WdgM service.
internalBehavior WdgMBehavior for WdgM {
	dataTypeMappings {
		WdgMTypeMappings
	}
	runnable WdgM_MainFunction [0.0] {
		symbol "WdgM_MainFunction"
		modeSwitchPoint localMode_Supervised100msTask.currentMode
		modeSwitchPoint globalMode.currentMode
	}
	runnable concurrent CheckpointReached[0.0] {
		symbol "WdgM_CheckpointReached"
		operationInvokedEvent localSupervision_Supervised100msTask.CheckpointReached
	}
	
	runnable concurrent GetLocalStatus[0.0] {
		symbol "WdgM_GetLocalStatus"		
		operationInvokedEvent localSupervisionStatus_Supervised100msTask.GetLocalStatus
	}
	
	runnable concurrent GetFirstExpiredSEID[0.0] {
		symbol "WdgM_GetFirstExpiredSEID"
		operationInvokedEvent globalSuperVision.GetFirstExpiredSEID
	}
	
	runnable concurrent GetGlobalStatus[0.0] {
		symbol "WdgM_GetGlobalStatus"
		operationInvokedEvent globalSuperVision.GetGlobalStatus
	}
	runnable concurrent GetMode[0.0] {
		symbol "WdgM_GetMode"
		operationInvokedEvent globalSuperVision.GetMode
	}
	runnable concurrent PerformReset[0.0] {
		symbol "WdgM_PerformReset"
		operationInvokedEvent globalSuperVision.PerformReset
	}
	runnable concurrent SetMode[0.0] {
		symbol "WdgM_SetMode"
		operationInvokedEvent globalSuperVision.SetMode
	}
	
	portAPIOption localSupervision_Supervised100msTask {WdgM_SupervisedEntityIdType 0}
	portAPIOption localSupervisionStatus_Supervised100msTask {WdgM_SupervisedEntityIdType 0}
	portAPIOption indirectAPI localMode_Supervised100msTask {WdgM_SupervisedEntityIdType 0}
	
}

implementation WdgMImpl for WdgM.WdgMBehavior {
	language c
	codeDescriptor "src"
	vendorId 60
}
