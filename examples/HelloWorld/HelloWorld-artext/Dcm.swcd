
/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

/* Generator version: 8.7.0
 * AUTOSAR version:   4.0.3
 */

package HelloWorld_Generic.Services.Dcm

import ArcCore.Platform.ImplementationDataTypes.*
import AUTOSAR.Services.Dcm.*
import AUTOSAR.Services.Dem.*


interface modeSwitch service DcmEcuReset_Interface {
	mode DcmEcuReset DcmEcuReset
}
interface modeSwitch service DcmRapidPowerShutDown_Interface {
	mode DcmModeRapidPowerShutDown DcmRapidPowerShutDown
}

 interface modeSwitch service DcmCommunicationControl_ComMChannel_Interface {
 	mode DcmCommunicationControl DcmCommunicationControl_ComMChannel
 }
interface modeSwitch service DcmControlDTCSetting_Interface {
	mode DcmControlDTCSetting DcmControlDTCSetting
}

/* @req DCM778 */
modeGroup DcmDiagnosticSessionControl initial DcmConf_DcmDspSessionRow_Default_Session {
	DcmConf_DcmDspSessionRow_Default_Session
}
/* @req DCM806 */
interface modeSwitch service DcmDiagnosticSessionControl_Interface {
	mode DcmDiagnosticSessionControl DcmDiagnosticSessionControl
}
dataTypeMappingSet ModeGroupTypeMappings {
	map uint8 DcmEcuReset
	map uint8 DcmModeRapidPowerShutDown
	map uint8 DcmCommunicationControl
	map uint8 DcmControlDTCSetting
	map uint8 DcmDiagnosticSessionControl
}


int impl SRWrite1_Data_DataType extends uint16

interface senderReceiver DataServices_SRWrite1_Data {
    data SRWrite1_Data_DataType Data
}
fixed impl SRWrite2_Data_DataType slope 1.0 bias 0.0 extends uint16

interface senderReceiver DataServices_SRWrite2_Data {
    data SRWrite2_Data_DataType Data
}
fixed impl SRRead1_Data_DataType slope 1.0 bias 0.0 extends uint16

interface senderReceiver DataServices_SRRead1_Data {
    data SRRead1_Data_DataType Data
}
int impl SRRead2_Data_DataType extends uint16

interface senderReceiver DataServices_SRRead2_Data {
    data SRRead2_Data_DataType Data
}
int impl SRRead3_Data_DataType extends ^boolean

interface senderReceiver DataServices_SRRead3_Data {
    data SRRead3_Data_DataType Data
}


// SecurityLevel_0 security interface
// types
array impl uint8[4] SecurityLevel_0SeedType
array impl uint8[4] SecurityLevel_0KeyType
// Interfaces
/* @req DCM685 */
interface clientServer service SecurityAccess_SecurityLevel_0 {
	error E_OK 0
	error E_NOT_OK 1
	error E_PENDING 10
	error E_COMPARE_KEY_FAILED 11

	operation GetSeed possibleErrors E_OK, E_NOT_OK, E_PENDING {
        in Dcm_OpStatusType OpStatus
		out SecurityLevel_0SeedType Seed
		out Dcm_NegativeResponseCodeType ErrorCode
	}
	operation CompareKey possibleErrors E_OK, E_NOT_OK, E_PENDING, E_COMPARE_KEY_FAILED {
		in SecurityLevel_0KeyType Key
        in Dcm_OpStatusType OpStatus
	}
}

/* @req DCM698 */
interface clientServer service DCMServices {
	error E_OK 0
	error E_NOT_OK 1

	operation GetActiveProtocol possibleErrors E_OK {
		out Dcm_ProtocolType ActiveProtocol
	}
	operation GetSecurityLevel possibleErrors E_OK, E_NOT_OK {
		out Dcm_SecLevelType SecLevel
	}
	operation GetSesCtrlType possibleErrors E_OK, E_NOT_OK {
		out Dcm_SesCtrlType SesCtrlType
	}
	operation ResetToDefaultSession possibleErrors E_OK, E_NOT_OK {
		
	}
}

/* @req DCM689 */
//Types
int impl DTRStatusType extends uint8
// Interfaces
interface clientServer service DTRServices {
	error E_OK 0
	error E_NOT_OK 1
    
    operation GetDTRValue possibleErrors E_OK, E_NOT_OK {
        in  Dcm_OpStatusType OpStatus
     	out uint16 Testval
     	out uint16 Minlimit
     	out uint16 Maxlimit
     	out DTRStatusType Status    
    }
 }




// service component according to AutoSAR.
component service Dcm {
	ports {
		sender DataServices_SRWrite1_Data_Write provides DataServices_SRWrite1_Data
		sender DataServices_SRWrite2_Data_Write provides DataServices_SRWrite2_Data
		receiver DataServices_SRRead1_Data requires DataServices_SRRead1_Data
		receiver DataServices_SRRead2_Data requires DataServices_SRRead2_Data
		receiver DataServices_SRRead3_Data requires DataServices_SRRead3_Data
		client SecurityAccess_SecurityLevel_0 requires SecurityAccess_SecurityLevel_0
		client CallbackDCMRequestServices_DcmDslCallbackDCMRequestService requires CallbackDCMRequestServices
		// The mode switch ports should not be connected by SWCs. They should be connected to BswM which will make them public to SWCs
		sender DcmEcuReset provides DcmEcuReset_Interface
		sender DcmRapidPowerShutDown provides DcmRapidPowerShutDown_Interface
		sender DcmCommunicationControl_ComMChannel provides DcmCommunicationControl_ComMChannel_Interface
		sender DcmControlDTCSetting provides DcmControlDTCSetting_Interface
		sender DcmDiagnosticSessionControl provides DcmDiagnosticSessionControl_Interface
		client DcmIf requires DcmIf
		server DCMServices provides DCMServices
	}
}


// define service component internal behavior for the RTE.
internalBehavior DcmBehavior for Dcm {
	dataTypeMappings {
		ModeGroupTypeMappings
	}
	// runnables
	runnable concurrent Dcm_GetSecurityLevel [0.0] {
		symbol "Dcm_GetSecurityLevel"
		operationInvokedEvent DCMServices.GetSecurityLevel
	}
	runnable concurrent Dcm_GetSesCtrlType [0.0] {
		symbol "Dcm_GetSesCtrlType"
		operationInvokedEvent DCMServices.GetSesCtrlType
	}
	runnable concurrent Dcm_GetActiveProtocol [0.0] {
		symbol "Dcm_GetActiveProtocol"
		operationInvokedEvent DCMServices.GetActiveProtocol
	}
	runnable concurrent Dcm_ResetToDefaultSession [0.0] {
		symbol "Dcm_ResetToDefaultSession"
		operationInvokedEvent DCMServices.ResetToDefaultSession
	}




	
	runnable Dcm_MainFunction [0.0] {
		symbol "Dcm_MainFunction"

		timingEvent 0.0 as Dcm_MainFunction_TimingEvent
		serverCallPoint synchronous SecurityAccess_SecurityLevel_0.GetSeed
		serverCallPoint synchronous SecurityAccess_SecurityLevel_0.CompareKey
		serverCallPoint synchronous CallbackDCMRequestServices_DcmDslCallbackDCMRequestService.StartProtocol
		serverCallPoint synchronous CallbackDCMRequestServices_DcmDslCallbackDCMRequestService.StopProtocol
		serverCallPoint synchronous DcmIf.ClearDTC
		modeSwitchPoint DcmEcuReset.DcmEcuReset
		modeSwitchPoint DcmRapidPowerShutDown.DcmRapidPowerShutDown
		modeSwitchPoint DcmCommunicationControl_ComMChannel.DcmCommunicationControl_ComMChannel
		modeSwitchPoint DcmControlDTCSetting.DcmControlDTCSetting
		modeSwitchPoint DcmDiagnosticSessionControl.DcmDiagnosticSessionControl
		dataSendPoint DataServices_SRWrite1_Data_Write.*
		dataSendPoint DataServices_SRWrite2_Data_Write.*
		dataReceivePoint DataServices_SRRead1_Data.*
		dataReceivePoint DataServices_SRRead2_Data.*
		dataReceivePoint DataServices_SRRead3_Data.*
	}
	// port api options
}

implementation DcmImpl for Dcm.DcmBehavior {
	language c
	codeDescriptor "src"
	vendorId 60
}


